<?php

/**
 * @file
 * Hooks and utility functions for commerce_pos.
 */

define('COMMERCE_PAYMENT_STATUS_VOID', 'void');
define('COMMERCE_POS_PAYMENT_STATUS_CANCELED', 'commerce_pos_canceled');

/**
 * Implements hook_menu().
 */
function commerce_pos_menu() {
  $items = array();

  $items['admin/commerce/pos'] = array(
    'title' => 'Point of Sale',
    'description' => 'Carry out in-person retail transactions.',
    'page callback' => 'commerce_pos_redirect',
    'access arguments' => array(
      array(
        'process commerce pos sales',
        'process commerce pos returns',
      ),
    ),
    'access callback' => '_commerce_pos_access_check',
    'file' => 'includes/commerce_pos.pages.inc',
  );

  $items['admin/commerce/pos/sale'] = array(
    'title' => 'Sale',
    'page callback' => 'commerce_pos_page',
    'page arguments' => array('commerce_pos_sale'),
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array('process commerce pos sales'),
    'file' => 'includes/commerce_pos.transaction.inc',
  );

  $items['admin/commerce/pos/sale/payment'] = array(
    'title' => 'Pay',
    'page callback' => 'commerce_pos_page',
    'page arguments' => array('commerce_pos_sale_payment'),
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array('process commerce pos sales'),
    'file' => 'includes/commerce_pos.payment.inc',
  );

  $items['admin/commerce/pos/return'] = array(
    'title' => 'Return',
    'page callback' => 'commerce_pos_page',
    'page arguments' => array('commerce_pos_return'),
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array('process commerce pos returns'),
    'file' => 'includes/commerce_pos.transaction.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/pos/return/payment'] = array(
    'title' => 'Refund',
    'page callback' => 'commerce_pos_page',
    'page arguments' => array('commerce_pos_return_payment'),
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array('process commerce pos returns'),
    'file' => 'includes/commerce_pos.payment.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/pos/login'] = array(
    'title' => 'Employee Login',
    'page callback' => 'commerce_pos_page',
    'page arguments' => array('commerce_pos_login'),
    'access arguments' => array('access content'),
    'file' => 'includes/commerce_pos.login.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/pos/product/autocomplete'] = array(
    'title' => 'Product Autocomplete',
    'page callback' => 'commerce_pos_product_autocomplete',
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array(
      array(
        'process commerce pos sales',
        'process commerce pos returns',
      ),
    ),
    'file' => 'includes/commerce_pos.common.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/pos/user/autocomplete'] = array(
    'title' => 'User Autocomplete',
    'page callback' => 'commerce_pos_user_autocomplete',
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array(
      array(
        'process commerce pos sales',
        'process commerce pos returns',
      ),
    ),
    'file' => 'includes/commerce_pos.common.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/config/pos'] = array(
    'title' => 'Point of Sale',
    'description' => 'Administer POS.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer commerce pos'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => 10,
  );

  $items['admin/commerce/config/pos/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_settings'),
    'access arguments' => array('administer commerce pos'),
    'file' => 'includes/commerce_pos.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_pos_permission() {
  return array(
    'administer commerce pos' => array(
      'title' => t('Administer Commerce POS'),
    ),
    'process commerce pos sales' => array(
      'title' => t('Process Commerce POS sales'),
    ),
    'process commerce pos returns' => array(
      'title' => t('Process Commerce POS returns'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function commerce_pos_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_pos_transaction' => array(
      'render element' => 'form',
      'template' => 'commerce-pos-transaction',
      'path' => $path . '/theme',
    ),
    'commerce_pos_payment' => array(
      'render element' => 'form',
      'template' => 'commerce-pos-payment',
      'path' => $path . '/theme',
    ),
    'commerce_pos_keypad' => array(
      'render element' => 'element',
      'template' => 'commerce-pos-keypad',
      'path' => $path . '/theme',
    ),
    'commerce_pos_order_balance_summary' => array(
      'file' => 'commerce_pos.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'order' => NULL,
        'display_only' => FALSE,
        'include_balance' => TRUE,
      ),
    ),
    'commerce_pos_transaction_actions' => array(
      'file' => 'commerce_pos.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'transaction' => NULL,
      ),
    ),
    'commerce_pos_transaction_balance' => array(
      'template' => 'commerce-pos-transaction-balance',
      'path' => $path . '/theme',
      'variables' => array(
        'rows' => array(),
        'form' => NULL,
        'totals' => array(),
        'view' => NULL,
      ),
    ),
    'commerce_pos_header' => array(
      'template' => 'commerce-pos-header',
      'file' => 'commerce_pos.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'account' => NULL,
      ),
    ),
    'commerce_pos_product_result' => array(
      'template' => 'commerce-pos-product-result',
      'file' => 'commerce_pos.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'product' => NULL,
      ),
    ),
    'commerce_pos_product_summary' => array(
      'file' => 'commerce_pos.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'order' => NULL,
        'attributes' => array(),
      ),
    ),
    'commerce_pos_price_formatted_components' => array(
      'variables' => array(
        'components' => array(),
        'price' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_pos_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_pos') . '/includes/views',
  );
}

/**
 * Implements hook_commerce_pos_transaction_base_info().
 */
function commerce_pos_commerce_pos_transaction_base_info() {
  return array(
    'commerce_pos_transaction_base_actions' => array(
      'class' => 'CommercePosTransactionBaseActions',
      'types' => array(
        CommercePosService::TRANSACTION_TYPE_SALE,
        CommercePosService::TRANSACTION_TYPE_RETURN,
      ),
    ),
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_pos_commerce_payment_method_info() {

  // Note that checkout and terminal are both FALSE. This payment method is
  // only meant to by internally used by the POS system.
  $payment_methods['commerce_pos_change'] = array(
    'base' => 'commerce_pos_change',
    'title' => t('Change'),
    'description' => t('Change given to a customer.'),
    'active' => TRUE,
    'checkout' => FALSE,
    'terminal' => FALSE,
    'fieldable' => FALSE,
  );
  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_transaction_status_info().
 */
function commerce_pos_commerce_payment_transaction_status_info() {
  $statuses[COMMERCE_PAYMENT_STATUS_VOID] = array(
    'status' => COMMERCE_PAYMENT_STATUS_VOID,
    'title' => t('Void'),
    'icon' => drupal_get_path('module', 'commerce_pos') . '/images/icon-void.png',
    'total' => FALSE,
  );

  $statuses[COMMERCE_POS_PAYMENT_STATUS_CANCELED] = array(
    'status' => COMMERCE_POS_PAYMENT_STATUS_CANCELED,
    'title' => t('Canceled'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-failure.png',
    'total' => FALSE,
  );
  return $statuses;
}

/**
 * Implements hook_commerce_order_state_info().
 *
 * Defines a new state that orders created by the POS live in until they have
 * been fully processed.
 */
function commerce_pos_commerce_order_state_info() {
  $order_states = array();

  $order_states['commerce_pos'] = array(
    'name' => 'commerce_pos',
    'title' => t('Point of Sale'),
    'description' => t('Orders in this state are currently being generated by the POS.'),
    'weight' => 10,
    'default_status' => 'creating',
  );

  return $order_states;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_pos_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses['commerce_pos_in_progress'] = array(
    'name' => 'commerce_pos_in_progress',
    'title' => t('POS - In Progress'),
    'state' => 'commerce_pos',
  );

  $order_statuses['commerce_pos_parked'] = array(
    'name' => 'commerce_pos_parked',
    'title' => t('POS - Parked'),
    'state' => 'commerce_pos',
  );

  $order_statuses['commerce_pos_voided'] = array(
    'name' => 'commerce_pos_voided',
    'title' => t('POS - Voided'),
    'state' => 'commerce_pos',
  );

  $order_statuses['commerce_pos_returned'] = array(
    'name' => 'commerce_pos_returned',
    'title' => t('POS - Returned'),
    'state' => 'commerce_pos',
  );

  return $order_statuses;
}

/**
 * Implements hook_image_default_styles().
 */
function commerce_pos_image_default_styles() {
  $styles = array();

  $styles['commerce_pos_thumbnail'] = array(
    'label' => 'Commerce POS thumbnail',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 75,
          'height' => 75,
        ),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_commerce_pos_balance_summary_row_info().
 *
 * Taken from commerce_payment_commerce_payment_totals_row_info().
 */
function commerce_payment_commerce_pos_balance_summary_row_info($totals, $order) {
  $rows = array();

  $transaction = CommercePosService::getOrderTransaction($order->order_id);
  $return = $transaction->type == CommercePosService::TRANSACTION_TYPE_RETURN;

  $balance_prefix = $return ? '(' : '';
  $balance_suffix = $return ? ')' : '';

  if (count($totals) == 0) {
    // Add a row for the remaining balance on the order.
    if ($order) {
      $balance = commerce_payment_order_balance($order, $totals);

      $rows[] = array(
        'data' => array(
          array(
            'data' => $return ? t('Refund') : t('To pay'),
            'class' => array('label'),
          ),
          array(
            'data' => $balance_prefix . commerce_currency_format($balance['amount'] > 0 ? $balance['amount'] : 0, $balance['currency_code']) . $balance_suffix,
            'class' => array('balance'),
          ),
        ),
        'class' => array('order-to-pay'),
        'weight' => 10,
      );

      if ($balance['amount'] < 0) {
        $rows[] = array(
          'data' => array(
            array('data' => t('Change'), 'class' => array('label')),
            array(
              'data' => $balance_prefix . commerce_currency_format($balance['amount'] * -1, $balance['currency_code']) . $balance_suffix,
              'class' => array('balance'),
            ),
          ),
          'class' => array('order-change'),
          'weight' => 15,
        );
      }
    }
  }
  elseif (count($totals) == 1) {
    // Otherwise if there's only a single currency total...
    $currency_code = key($totals);

    // Add a row for the total amount paid.
    $rows[] = array(
      'data' => array(
        array(
          'data' => $return ? t('Total Refunded') : t('Total Paid'),
          'class' => array('label'),
        ),
        array(
          'data' => $balance_prefix . commerce_currency_format($totals[$currency_code], $currency_code) . $balance_suffix,
          'class' => array('total'),
        ),
      ),
      'class' => array('total-paid'),
      'weight' => 0,
    );

    // Add a row for the remaining balance on the order.
    if ($order) {
      // @todo Fix for when there's a FALSE $balance.
      $balance = commerce_payment_order_balance($order, $totals);

      $rows[] = array(
        'data' => array(
          array(
            'data' => $return ? t('To Refund') : t('To Pay'),
            'class' => array('label'),
          ),
          array(
            'data' => $balance_prefix . commerce_currency_format($balance['amount'] > 0 ? $balance['amount'] : 0, $balance['currency_code']) . $balance_suffix,
            'class' => array('balance'),
          ),
        ),
        'class' => array('order-to-pay'),
        'weight' => 10,
      );

      if ($balance['amount'] < 0) {
        $rows[] = array(
          'data' => array(
            array('data' => t('Change'), 'class' => array('label')),
            array(
              'data' => commerce_currency_format($balance['amount'] * -1, $balance['currency_code']),
              'class' => array('balance'),
            ),
          ),
          'class' => array('order-change'),
          'weight' => 15,
        );
      }
    }
  }
  else {
    $weight = 0;

    foreach ($totals as $currency_code => $amount) {
      $rows[] = array(
        'data' => array(
          array(
            'data' => $return ? t('To Refund (@currency_code)', array('@currency_code' => $currency_code)) : t('To pay (@currency_code)', array('@currency_code' => $currency_code)),
            'class' => array('label'),
          ),
          array(
            'data' => $balance_prefix . commerce_currency_format($amount > 0 ? $amount : 0, $currency_code) . $balance_suffix,
            'class' => array('balance'),
          ),
        ),
        'class' => array('order-to-pay', 'order-to-pay-' . $currency_code),
        'weight' => $weight++,
      );

      if ($amount < 0) {
        $rows[] = array(
          'data' => array(
            array(
              'data' => t('Change (@currency_code)', array('@currency_code' => $currency_code)),
              'class' => array('label'),
            ),
            array(
              'data' => commerce_currency_format($amount * -1, $currency_code),
              'class' => array('balance'),
            ),
          ),
          'class' => array('order-change', 'order-change-' . $currency_code),
          'weight' => $weight++,
        );
      }
    }
  }

  return $rows;
}

/**
 * Implements hook_commerce_price_formatted_components_alter().
 */
function commerce_pos_commerce_price_formatted_components_alter(&$components, $price, $entity) {
  $is_pos_order = (isset($entity->type) && $entity->type == 'commerce_order' && $entity->status == 'commerce_pos_in_progress');

  if ($is_pos_order) {
    foreach ($components as $component_name => &$component) {
      // Make sure discount components show up before tax, which has a weight of 0.
      if (strpos($component_name, 'discount|') === 0) {
        $component['weight'] = -10;
      }

      switch ($component_name) {
        case 'base_price':
          $component['title'] = t('Subtotal (excl taxes)');
          break;

        case 'commerce_price_formatted_amount':
          $component['title'] = t('Total');
          break;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_pos_form_commerce_cop_edit_payment_form_alter(&$form, &$form_state) {
  $pos_default = 0;

  if (!empty($form['id']['#default_value'])) {
    $enabled_payment_methods = variable_get('commerce_pos_payment_methods', array());
    $payment_id = $form['id']['#default_value'];

    if (in_array($payment_id, $enabled_payment_methods)) {
      $pos_default = 1;
    }
  }

  $form['pos'] = array(
    '#type' => 'checkbox',
    '#title' => t('Available on POS'),
    '#description' => t('TRUE or FALSE indicating whether or not this payment method can be used in the POS interface.'),
    '#default_value' => $pos_default,
  );

  $form['actions']['#weight'] = 50;

  $form['#submit'][] = 'commerce_pos_cop_edit_form_submit';
}

/**
 * Additional submit handler for the Commerce COP payment method form.
 *
 * This looks to see whether the "Available POS" checkbox was checked or not
 * and add/removes the payment method from the list of enabled methods for the
 * POS.
 */
function commerce_pos_cop_edit_form_submit($form, &$form_state) {
  if (isset($form_state['values']['pos'])) {
    $payment_method_id = $form_state['values']['id'];

    if (!empty($form_state['values']['pos'])) {
      commerce_pos_enable_payment_method($payment_method_id);
    }
    else {
      commerce_pos_disable_payment_method($payment_method_id);
    }
  }
}

/**
 * Page callback: Displays the POS user interface.
 *
 * @param int $form_id
 *   The ID of the form to load.
 *
 * @return array
 *   renderable array
 */
function commerce_pos_page($form_id = NULL) {
  global $user;

  if (empty($form_id)) {
    return MENU_NOT_FOUND;
  }

  $page['header'] = array(
    '#markup' => theme('commerce_pos_header', array('account' => $user)),
  );

  $page['form'] = drupal_get_form($form_id);

  return $page;
}

/**
 * Retrieves a list of Commerce Custom Offline Payment methods that are enabled on the POS.
 */
function commerce_pos_get_payment_methods() {
  // First get a list of all offline payment methods.
  $cop_payment_methods = commerce_cop_get_payments();
  $enabled_payment_methods = variable_get('commerce_pos_payment_methods', array());
  $enabled_pos_methods = array();

  foreach ($cop_payment_methods as $method_id => $payment_method) {
    if (!empty($payment_method['status']) && in_array($method_id, $enabled_payment_methods)) {
      $enabled_pos_methods[$method_id] = $payment_method;
    }
  }

  return $enabled_pos_methods;
}

/**
 * Returns default payment setting if set.
 * @return null
 */
function commerce_pos_get_default_payment_option(){
  $default_setting = variable_get('commerce_pos_default_payment_method');
  if($default_setting == ''){
    return null;
  }
  return $default_setting;
}

/**
 * Retrieves a list of payment options for the Point of Sale payment form.
 */
function commerce_pos_get_payment_options() {
  $options = array();

  $methods = commerce_pos_get_payment_methods();
  foreach ($methods as $method) {
    $options[$method['id']] = array(
      'id' => $method['id'],
      'title' => $method['title'],
    );
  }

  $options += module_invoke_all('commerce_pos_payment_options_info');

  return $options;
}

/**
 * Enables a Commerce Custom Offline Payment method for use in the POS.
 */
function commerce_pos_enable_payment_method($method_id) {
  $enabled_payment_methods = variable_get('commerce_pos_payment_methods', array());

  if (!in_array($method_id, $enabled_payment_methods)) {
    $enabled_payment_methods[] = $method_id;
    variable_set('commerce_pos_payment_methods', $enabled_payment_methods);
    return TRUE;
  }

  return FALSE;
}

/**
 * Disables a Commerce Custom Offline Payment method from use in the POS.
 *
 * @param int $method_id
 *   COP method to be disabled.
 *
 * @return bool
 *   True if the method exists, false if it does not.
 */
function commerce_pos_disable_payment_method($method_id) {
  $enabled_payment_methods = variable_get('commerce_pos_payment_methods', array());

  foreach ($enabled_payment_methods as $key => $enabled_method_id) {
    if ($method_id == $enabled_method_id) {
      array_splice($enabled_payment_methods, $key, 1);
      variable_set('commerce_pos_payment_methods', $enabled_payment_methods);
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Ensures the phone number field is present on the user entity.
 */
function commerce_pos_user_phone_number_configure() {
  // Look for or add a text field to the user type to store their phone number.
  $field_name = 'commerce_pos_phone_number';

  $field = field_info_field($field_name);
  $instance = field_info_instance('user', $field_name, 'user');

  if (empty($field)) {
    // Create the base field first.
    $field = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => $field_name,
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(
        'max_length' => 255,
      ),
      'translatable' => 0,
      'type' => 'text',
    );

    field_create_field($field);
  }

  if (empty($instance)) {
    // Create the field instance.
    $instance = array(
      'bundle' => 'user',
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'user',
      'field_name' => $field_name,
      'label' => 'POS Phone Number',
      'required' => 0,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => 0,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => 60,
        ),
        'type' => 'text_textfield',
        'weight' => 11,
      ),
    );

    field_create_instance($instance);
  }
}

/**
 * Returns a sorted array of POS balance table rows.
 *
 * @param array $totals
 *   An array of payment totals whose keys are currency codes and values are the
 *     total amount paid in each currency.
 * @param object $order
 *   If available, the order object to which the payments apply.
 *
 * @return array
 *   An array of table row data as expected by theme_table().
 *
 * @see hook_commerce_payment_totals_row_info()
 */
function commerce_pos_balance_summary_rows(array $totals, $order) {
  // Retrieve rows defined by the hook and allow other modules to alter them.
  $rows = module_invoke_all('commerce_pos_balance_summary_row_info', $totals, $order);
  drupal_alter('commerce_pos_balance_summary_row_info', $rows, $totals, $order);

  // Sort the rows by weight and return the array.
  uasort($rows, 'drupal_sort_weight');

  return $rows;
}

/**
 * Returns a summary view of a POS transaction's order.
 */
function commerce_pos_balance_summary($order, $display_only = FALSE, $include_balance = TRUE) {
  return theme('commerce_pos_order_balance_summary', array(
    'order' => $order,
    'display_only' => $display_only,
    'include_balance' => $include_balance
  ));
}

/**
 * Retrieves a product's display node id.
 *
 * @param int $product_id
 *   The product ID to retrieve the display node for.
 *
 * @return int
 *   The nid of the display node, or 0 if none was found.
 */
function commerce_pos_get_product_display_nid($product_id) {
  global $language;

  // Iterate through fields which refer to products.
  foreach (commerce_info_fields('commerce_product_reference', 'node') as $field) {
    $query = 'SELECT entity_id, language FROM {field_data_' . $field['field_name'] . '}
      WHERE entity_type = :node
      AND ' . $field['field_name'] . '_product_id = :product_id
      AND (language = :language OR language = :language_none)';

    $result = db_query($query, array(
      ':node' => 'node',
      'product_id' => $product_id,
      'language' => $language->language,
      'language_none' => LANGUAGE_NONE,
    ));

    $no_lang_id = 0;

    foreach ($result as $row) {
      if ($row->language == $language->language) {
        return $row->entity_id;
      }
      elseif ($row->language == LANGUAGE_NONE) {
        $no_lang_id = $row->entity_id;
      }
    }

    // If we made it this far, there were either no matches or the only match
    // was one without a language set.
    return $no_lang_id;
  }

  return 0;
}

/**
 * Formats an order's price as components.
 *
 * A customized version of the 'commerce_price_formatted_components' display
 * from commerce_price_field_formatter_view().
 *
 * @param object $order_wrapper
 *   The entity metadata wrapper for the order.
 * @param string $field_name
 *   The name of the price field to format.
 * @param bool $return
 *   A boolean indicating whether this price is being used in a return or not.
 * @param bool $print
 *   A boolean indicating if this price is being displayed in a print view.
 *
 * @return array
 *   A render array for the formatted price field.
 */
function commerce_pos_price_order_format($order_wrapper, $field_name, $return = FALSE, $print = FALSE) {
  $price = $order_wrapper->{$field_name}->value();
  $components = array();
  $weight = 0;

  foreach ($price['data']['components'] as $key => $component) {
    $component_type = commerce_price_component_type_load($component['name']);

    if (empty($components[$component['name']])) {
      $components[$component['name']] = array(
        'title' => check_plain($component_type['display_title']),
        'price' => commerce_price_component_total($price, $component['name']),
        'weight' => $component_type['weight'],
      );

      $weight = max($weight, $component_type['weight']);
    }
  }

  // If there is only a single component and its price equals the field's,
  // then remove it and just show the actual price amount.
  if (count($components) == 1 && in_array('base_price', array_keys($components))) {
    $components = array();
  }

  // Add the actual field value to the array.
  $components['commerce_price_formatted_amount'] = array(
    'title' => $return ? t('Refund total') : t('Order total'),
    'price' => $price,
    'weight' => $weight + 1,
  );

  $price['#commerce_pos_print'] = $print;
  $order = $order_wrapper->value();

  drupal_alter('commerce_price_formatted_components', $components, $price, $order);

  // Sort the components by weight.
  uasort($components, 'drupal_sort_weight');

  // Format the prices for display.
  foreach ($components as $key => &$component) {
    $formatted_price = commerce_currency_format(
      $component['price']['amount'],
      $component['price']['currency_code'],
      $order_wrapper->value()
    );

    if ($return) {
      $formatted_price = '(' . $formatted_price . ')';
    }

    $component['formatted_price'] = $formatted_price;
  }

  return array(
    '#markup' => theme('commerce_pos_price_formatted_components', array(
      'components' => $components,
      'price' => $price,
    )),
  );
}

/**
 * Formats an empty order with 0 value as components.
 *
 * A customized version of the 'commerce_price_formatted_components' display
 * from commerce_price_field_formatter_view().
 *
 * @param array|null $currency_code
 *   The currency code of the order.
 *
 * @return array
 *   A render array for the formatted price field.
 */
function commerce_pos_empty_order_format_total(array $currency_code = NULL) {
  $currency = empty($currency_code) ? commerce_default_currency() : $currency_code;
  $formatted_price = commerce_currency_format(0, $currency_code);
  $price = array(
    'amount' => 0,
    'currency_code' => $currency,
  );
  $components = array(
    'commerce_price_formatted_amount' => array(
      'title' => t('Total'),
      'price' => $price,
      'weight' => 1,
      'formatted_price' => '(' . $formatted_price . ')',
    ),
  );

  return array(
    '#markup' => theme('commerce_pos_price_formatted_components', array(
      'components' => $components,
      'price' => $price,
    )),
  );
}

/**
 * Builds an array of product data for the product autocomplete.
 *
 * @param int $product_id
 *   Product id of the product to build.
 *
 * @return array|bool
 *   Array of product data for the autocomplete, or false if product couldn't be loaded.
 */
function _commerce_pos_product_autocomplete_build($product_id) {
  $data = FALSE;

  if ($product = commerce_product_load($product_id)) {

    $data = array(
      'markup' => theme('commerce_pos_product_result', array('product' => $product)),
      'title' => $product->title,
    );
  }

  return $data;
}

/**
 * Access callback for POS pages.
 *
 * @param string|array $access_arguments
 *   A list of permissions to check against.
 *
 * @return bool
 *   True if access allowed, false if not.
 */
function _commerce_pos_access_check($access_arguments) {
  $access = FALSE;

  if (is_string($access_arguments)) {
    $access_arguments = array($access_arguments);
  }

  if (user_is_logged_in()) {
    if (user_access('administer commerce pos')) {
      $access = TRUE;
    }
    else {

      // They're logged in, make sure they have permission to access the page.
      $passed_all_checks = TRUE;

      foreach ($access_arguments as $access_argument) {
        if (!user_access($access_argument)) {
          $passed_all_checks = FALSE;
          break;
        }
      }

      if ($passed_all_checks) {
        $access = TRUE;
      }
    }
  }

  return $access;
}

/**
 * Builds an image tag to a product's thumbnail.
 *
 * @param object $product
 *   The product to retrieve the thumbnail for.
 *
 * @return string
 *   Either the image tag for the thumbnail, or an empty string.
 */
function _commerce_pos_product_thumbnail($product) {
  $uri = FALSE;

  if ($image_fields = variable_get('commerce_pos_image_field_' . $product->type, FALSE)) {
    if (!($uri = _commerce_pos_image_uri('commerce_product', $product, $image_fields))
      && $nid = commerce_pos_get_product_display_nid($product->product_id)
    ) {

      // Try looking for images on the product display node.
      $node = node_load($nid);
      $uri = _commerce_pos_image_uri('node', $node, $image_fields);
    }
  }

  if (!$uri) {
    // Check for a default image.
    if ($default_image = _commerce_pos_product_default_image($product->type)) {
      $uri = $default_image->uri;
    }
  }

  if ($uri) {
    return theme('image_style', array(
      'style_name' => 'commerce_pos_thumbnail',
      'path' => $uri,
      'alt' => $product->title,
    ));
  }
  else {
    return '';
  }
}

/**
 * Try and retrieve the first image URI for an entity in a list of fields.
 */
function _commerce_pos_image_uri($entity_type, $entity, $fields) {
  $uri = FALSE;

  foreach ($fields as $field_name) {
    if ($product_images = field_get_items($entity_type, $entity, $field_name)) {
      if (!empty($product_images[0]['uri'])) {
        $uri = $product_images[0]['uri'];
        break;
      }
    }
  }

  return $uri;
}

/**
 * Retrieve the URI of a product's default image for the POS, if it exists.
 */
function _commerce_pos_product_default_image($product_type) {
  if ($fid = variable_get('commerce_pos_image_default_' . $product_type)) {
    if ($file = file_load($fid)) {
      return $file;
    }
  }

  return FALSE;
}

/**
 * Themes a price components table.
 *
 * A customized version of the 'theme_commerce_price_formatted_components' display
 * from commerce_price.module.
 *
 * @param array $variables
 *   Includes the 'components' array and original 'price' array.
 */
function theme_commerce_pos_price_formatted_components(array $variables) {
  // Add the CSS styling to the table.
  drupal_add_css(drupal_get_path('module', 'commerce_price') . '/theme/commerce_price.theme.css');

  // Build table rows out of the components.
  $rows = array();

  foreach ($variables['components'] as $name => $component) {
    $row = array(
      'data' => array(),
      'class' => array(drupal_html_class('component-type-' . $name)),
    );

    $row['data'][] = array(
      'data' => $component['title'],
      'class' => array('component-title'),
    );

    // Add action.
    if (isset($component['action'])) {
      $row['data'][] = array(
        'data' => $component['action'],
        'class' => array('component-action'),
      );
    }
    else {
      $row['data'][] = array();
    }

    $row['data'][] = array(
      'data' => $component['formatted_price'],
      'class' => array('component-total'),
    );

    $rows[] = $row;
  }

  return theme('table', array(
    'rows' => $rows,
    'attributes' => array('class' => array('commerce-pos-sidebar-table', 'commerce-price-formatted-components')),
  ));
}

/**
 * Void a commerce payment transaction.
 *
 * @param int $transaction_id
 *   The id of a commerce payment transaction.
 */
function commerce_pos_payment_transaction_void($transaction_id) {
  $transaction = commerce_payment_transaction_load($transaction_id);

  if ($transaction == NULL) {
    return;
  }

  // Look for which module, if any, processed the transaction and allow it to
  // void the transaction.
  $void_callback_exists = FALSE;
  if (isset($transaction->data['processing_module'])) {
    $void_callback = $transaction->data['processing_module'] . '_commerce_pos_void_payment_transaction';

    if (function_exists($void_callback)) {
      $void_callback_exists = TRUE;
      $void_result = $void_callback($transaction);

      // Update the transaction if the module was able to void it. Otherwise,
      // just inform the user.
      if ($void_result['success']) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_VOID;
        commerce_payment_transaction_save($transaction);
      }
      else {
        drupal_set_message(t('Failed to void transaction @id.@message', array(
          '@id' => $transaction_id,
          '@message' => (isset($void_result['message'])) ? ' ' . $void_result['message'] : NULL,
        )), 'error');
      }
    }
  }

  // If there is no callback to void the transaction, just change its status.
  if (!$void_callback_exists) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_VOID;
    commerce_payment_transaction_save($transaction);
  }
}

/**
 * Find commerce payment transactions for the given order.
 *
 * @param int $order_id
 *   Order ID of the order to load transactions from.
 *
 * @return array
 *   An array of commerce_payment_transaction ids or an empty array if none
 *   are found.
 */
function commerce_pos_get_order_transactions($order_id) {
  $transaction_ids = array();

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('order_id', $order_id)
    ->execute();

  if (isset($result['commerce_payment_transaction'])) {
    $transaction_ids = array_keys($result['commerce_payment_transaction']);
  }

  return $transaction_ids;
}

/**
 * Retrieves a Commerce POS transaction by its order ID.
 *
 * @param int $order_id
 *   Order ID of the order to load transactions from.
 *
 * @return CommercePosTransaction|bool
 *   The transaction object or false if no object found.
 */
function commerce_pos_get_pos_transaction_by_order_id($order_id) {
  $query = 'SELECT transaction_id FROM {commerce_pos_transaction} WHERE order_id = :order_id';
  if ($transaction_id = $result = db_query($query, array(':order_id' => $order_id))->fetchField()) {
    return CommercePosService::loadTransaction($transaction_id);
  }
  else {
    return FALSE;
  }
}

/**
 * Checks whether an item is in the active trail.
 *
 * @return bool
 *   TRUE when path is in the active trail, FALSE if not.
 */
function commerce_pos_in_active_trail($path) {
  $active_paths = &drupal_static(__FUNCTION__);

  // Gather active paths.
  if (!isset($active_paths)) {
    $active_paths = array();
    $trail = menu_get_active_trail();
    foreach ($trail as $item) {
      if (!empty($item['href'])) {
        $active_paths[] = $item['href'];
      }
    }
  }
  return in_array($path, $active_paths);
}

/**
 * Round an amount to the nearest step.
 *
 * @param array $amount
 *   An array with the following keys and values:
 *   - amount: A numeric value for the amount.
 *   - currency_code: The currency code for the amount.
 * @param int $step
 *   A step to round to, such as "1", "5", etc.
 *
 * @return int
 *   The amount, rounded.
 */
function commerce_pos_round_nearest(array $amount, $step) {
  $decimal = commerce_currency_amount_to_decimal($amount['amount'], $amount['currency_code']);

  // Module operator does not work with floats.
  // http://php.net/manual/en/function.fmod.php
  $difference = fmod($decimal, $step);
  if ($difference === 0.0) {
    return $decimal;
  }

  return $decimal - $difference + $step;
}
