<?php

/**
 * @file
 * commerce_pos_register.module
 */

/**
 * Implements hook_menu().
 */
function commerce_pos_register_menu() {
  $items['admin/commerce/pos/register/%commerce_pos_register'] = array(
    'title' => 'POS register',
    'title callback' => 'commerce_pos_register_title',
    'title arguments' => array(4),
    'page callback' => 'commerce_pos_register_view_register',
    'page arguments' => array(4),
    'access arguments' => array('view commerce pos registers'),
    'file' => 'includes/commerce_pos_register.pages.inc',
  );

  $items['admin/commerce/pos/register-select'] = array(
    'title' => 'Select register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_register_select'),
    'file' => 'includes/commerce_pos_register.pages.inc',
    'access arguments' => array('view commerce pos registers'),
  );

  $items['admin/commerce/pos/float/%/select'] = array(
    'title' => 'Enter opening float',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_register_float_form', 4),
    'file' => 'includes/commerce_pos_register.pages.inc',
    'access arguments' => array('view commerce pos registers'),
  );

  return $items;
}

/**
 * Implements hook_commerce_pos_transaction_base_info().
 */
function commerce_pos_register_commerce_pos_transaction_base_info() {
  return array(
    'commerce_pos_register_base' => array(
      'class' => 'CommercePosRegisterBase',
      'types' => array(
        CommercePosService::TRANSACTION_TYPE_SALE,
        CommercePosService::TRANSACTION_TYPE_RETURN,
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function commerce_pos_register_permission() {
  return array(
    'administer commerce pos registers' => array(
      'title' => t('Administer POS registers'),
    ),
    'create commerce pos registers' => array(
      'title' => t('Create new POS registers'),
    ),
    'view commerce pos registers' => array(
      'title' => t('View POS registers'),
    ),
    'edit commerce pos registers' => array(
      'title' => t('Edit POS registers'),
    ),
    'delete commerce pos registers' => array(
      'title' => t('Delete POS registers'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function commerce_pos_register_entity_info() {
  $info = array();

  $info['commerce_pos_register'] = array(
    'label' => t('POS Register'),
    'entity class' => 'Entity',
    'controller class' => 'CommercePosRegisterEntityController',
    'base table' => 'commerce_pos_register',
    'access callback' => 'commerce_pos_register_entity_access_callback',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'register_id',
      'label' => 'name',
    ),
    'load hook' => 'commerce_pos_register_load',
    'admin ui' => array(
      'path' => 'admin/commerce/config/pos/registers',
      'controller class' => 'EntityDefaultUIController',
    ),
    'views controller class' => 'EntityDefaultViewsController',
    'uri callback' => 'commerce_pos_register_uri',
    'bundles' => array(
      'commerce_pos_register' => array(
        'label' => t('POS Register'),
        'admin' => array(
          'path' => 'admin/commerce/config/pos/registers',
        ),
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_views_api().
 */
function commerce_pos_register_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_pos_register') . '/includes/views',
    'template path' => drupal_get_path('module', 'commerce_pos_register') . '/theme',
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_pos_register_entity_property_info_alter(&$info) {
  $properties = &$info['commerce_pos_register']['properties'];

  $properties['register_id'] = array(
    'label' => t('Register ID'),
    'description' => t('The ID of the POS register.'),
    'type' => 'integer',
    'schema field' => 'register_id',
  );

  $properties['name'] = array(
    'label' => t('Register name'),
    'description' => t('The name of the register'),
    'type' => 'text',
    'schema field' => 'name',
  );

  $properties['created'] = array(
    'label' => t('Date created'),
    'type' => 'date',
    'description' => t('The date the register was posted.'),
    'schema field' => 'created',
  );

  $properties['changed'] = array(
    'label' => t('Date changed'),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t('The date the register was most recently updated.'),
  );
}

/**
 * Implements hook_commerce_pos_transaction_state_alter().
 */
function commerce_pos_register_commerce_pos_transaction_state_alter(&$administrative_area, CommercePosTransaction $transaction) {
  if (!empty($transaction->registerId)) {
    // Grab the location's administrative area from its address.
    $location = commerce_pos_register_get_location_for_register($transaction->registerId);
    $location_wrapper = entity_metadata_wrapper('commerce_pos_location', $location);

    if ($location_administrative_area = $location_wrapper->commerce_pos_location_address->administrative_area->value()) {
      $administrative_area = $location_administrative_area;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_pos_register_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'commerce_pos_login':
      _commerce_pos_register_login_form_alter($form, $form_state);
      break;

    case 'commerce_pos_sale':
    case 'commerce_pos_return':
    case 'commerce_pos_sale_payment':
    case 'commerce_pos_return_payment':
      // This will make sure a register and float have been entered before
      // being able to process transactions.
      _commerce_pos_register_check_form_alter($form, $form_state);
      break;
  }
}

/**
 * Adds a register selection element to the POS login form.
 */
function _commerce_pos_register_login_form_alter(&$form, &$form_state) {
  $registers = commerce_pos_register_options();

  if (!empty($registers)) {
    $current_register = commerce_pos_register_get_current_register();

    $form['register'] = array(
      '#title' => t('Register'),
      '#type' => 'select',
      '#options' => $registers,
      '#required' => TRUE,
      '#default_value' => $current_register ? $current_register : NULL,
    );

    $form['#submit'][] = 'commerce_pos_register_login_submit';
  }
}

/**
 * Adds a register check to the POS transaction forms.
 */
function _commerce_pos_register_check_form_alter(&$form, &$form_state) {
  $current_register = commerce_pos_register_get_current_register();
  $destination = drupal_get_destination();

  $goto = FALSE;

  // Make sure the current user has a location, otherwise make them select one.
  if (!$current_register) {
    $goto = 'admin/commerce/pos/register-select';
  }
  elseif (empty(commerce_pos_register_get_floats($current_register))) {
    $goto = 'admin/commerce/pos/float/' . $current_register . '/select';
  }

  if ($goto) {
    // Clear out messages as they won't be relevant to the page we redirect to.
    drupal_get_messages();

    drupal_goto($goto, array(
      'query' => $destination,
    ));
  }
}

/**
 * Additional submit handler for the POS login form.
 *
 * This will store the selected location in the session, as well as a cookie
 * for longer-lasting purposes.
 */
function commerce_pos_register_login_submit($form, &$form_state) {
  commerce_pos_register_set_current_register($form_state['values']['register']);
}

/**
 * Access callback for POS register entities.
 */
function commerce_pos_register_entity_access_callback($op, $register = NULL, $account = NULL) {
  global $user;

  $permission_name = '';

  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'view':
      $permission_name = 'view commerce pos registers';
      break;

    case 'edit':
      $permission_name = 'edit commerce pos registers';
      break;

    case 'delete':
      $permission_name = 'delete commerce pos registers';
      break;

    case 'create':
      $permission_name = 'create commerce pos registers';
      break;
  }

  return (user_access('administer commerce pos registers', $account) || user_access($permission_name, $account));
}

/**
 * Callback for the commerce_pos_register edit/create form.
 */
function commerce_pos_register_form($form, &$form_state, $register = NULL) {
  $form['name'] = array(
    '#title' => t('Register name'),
    '#type' => 'textfield',
    '#default_value' => isset($register->name) ? $register->name : '',
    '#required' => TRUE,
    '#weight' => -50,
  );

  field_attach_form('commerce_pos_register', $register, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($register->location_id) ? t('Update Register') : t('Save Register'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Submit handler for the commerce_pos_register add/edit form.
 */
function commerce_pos_register_form_submit($form, &$form_state) {
  $register = entity_ui_form_submit_build_entity($form, $form_state);
  $register->save();
  drupal_set_message(t('Register "@name" has been saved.', array('@name' => $register->name)));
  $form_state['redirect'] = 'admin/commerce/config/pos/registers';
}

/**
 * Loads a register by ID.
 */
function commerce_pos_register_load($register_id) {
  if (empty($register_id)) {
    return FALSE;
  }

  $registers = commerce_pos_register_load_multiple(array($register_id), array());
  return $registers ? reset($registers) : FALSE;
}

/**
 * Loads multiple registers by ID or based on a set of matching conditions.
 *
 * @param array $register_ids
 *   An array of register IDs.
 * @param array $conditions
 *   An array of conditions on the {commerce_pos_register} table in the form
 *     'field' => $value.
 * @param bool $reset
 *   Whether to reset the internal product loading cache.
 *
 * @return array
 *   An array of register objects indexed by register_id.
 *
 * @see entity_load()
 */
function commerce_pos_register_load_multiple(array $register_ids = array(), array $conditions = array(), $reset = FALSE) {
  if (empty($register_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('commerce_pos_register', $register_ids, $conditions, $reset);
}

/**
 * URI callback for a commerce_pos_register entity.
 *
 * @return array
 *   Registers do not currently need any kind of display URL, so this just returns
 *   NULL.
 */
function commerce_pos_register_uri($register) {
  return array(
    'path' => 'admin/commerce/pos/register/' . $register->register_id,
  );
}

/**
 * Title callback for a POS register display page.
 */
function commerce_pos_register_title($register) {
  return $register->name;
}

/**
 * Retrieves the current user's register ID, if they have one.
 */
function commerce_pos_register_get_current_register() {
  $valid_register_ids = commerce_pos_register_get_registers();
  $register_id = FALSE;

  // We also make sure the current register ID is valid, in case it was deleted.
  if (isset($_SESSION['commerce_pos_register_id'])) {
    if (in_array($_SESSION['commerce_pos_register_id'], $valid_register_ids)) {
      $register_id = $_SESSION['commerce_pos_register_id'];
    }
    else {
      // Register ID is no longer valid, unset it.
      unset($_SESSION['commerce_pos_register_id']);
    }
  }

  return $register_id;
}

/**
 * Takes a register_id and sets it as the current/active register.
 */
function commerce_pos_register_set_current_register($register_id) {
  $_SESSION['commerce_pos_register_id'] = $register_id;
}

/**
 * Gets the location of a register.
 *
 * @param int $register_id
 *   The id of the register to get the location of.
 *
 * @return Entity|null
 *   A commerce_pos_location entity or NULL.
 */
function commerce_pos_register_get_location_for_register($register_id) {
  $register = commerce_pos_register_load($register_id);
  $register_wrapper = entity_metadata_wrapper('commerce_pos_register', $register);
  return $register_wrapper->field_location_reference->value();
}

/**
 * Retrieves a list of POS register names, keyed by register_id.
 */
function commerce_pos_register_options() {
  $registers = array();

  foreach (commerce_pos_register_get_registers() as $register_id) {
    $register = commerce_pos_register_load($register_id);
    $register_wrapper = entity_metadata_wrapper('commerce_pos_register', $register);
    $location = $register_wrapper->field_location_reference->value();

    if ($location) {
      $location_name = $location->name;
    }
    else {
      $location_name = t('No Location');
    }

    $registers[$location_name][$register->register_id] = $register->name;
  }

  return $registers;
}

/**
 * Get the ids of all registers.
 *
 * @param bool $reset
 *   If TRUE, the static cache will be reset and registers will be loaded fresh
 *   from the database.
 *
 * @return array
 *   An array of register IDs.
 */
function commerce_pos_register_get_registers($reset = FALSE) {
  $register_ids = &drupal_static(__FUNCTION__, NULL);

  if ($register_ids === NULL || $reset) {
    $register_ids = array();

    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'commerce_pos_register')
      ->execute();

    if (isset($result['commerce_pos_register'])) {
      $register_ids = array_keys($result['commerce_pos_register']);
    }
  }

  return $register_ids;
}

/**
 * Adds a reference to a location entity on registers.
 */
function commerce_pos_register_configure_registers() {
  $field_name = 'field_location_reference';
  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_pos_register', $field_name, 'commerce_pos_register');

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'entityreference',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'commerce_pos_location'
      ),
      'translatable' => FALSE,
    );

    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'label' => t('Location'),
      'entity_type' => 'commerce_pos_register',
      'bundle' => 'commerce_pos_register',
      'required' => TRUE,
      'target_bundles' => array('commerce_pos_location'),
      'widget' => array(
        'type' => 'options_select',
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

  // Default Float.
  $field_name = 'commerce_pos_default_float';
  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_pos_register', $field_name, 'commerce_pos_register');

  if (empty($field)) {
    $field = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => $field_name,
      'indexes' => array(),
      'locked' => 0,
      'module' => 'number',
      'settings' => array(
        'decimal_separator' => '.',
        'precision' => 10,
        'scale' => 2,
      ),
      'translatable' => 0,
      'type' => 'number_decimal',
    );

    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'bundle' => 'commerce_pos_register',
      'default_value' => array(
        0 => array(
          'value' => 100,
        ),
      ),
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'number',
          'settings' => array(
            'decimal_separator' => '.',
            'prefix_suffix' => TRUE,
            'scale' => 2,
            'thousand_separator' => '',
          ),
          'type' => 'number_decimal',
          'weight' => 1,
        ),
      ),
      'entity_type' => 'commerce_pos_register',
      'field_name' => $field_name,
      'label' => 'Default float',
      'required' => 1,
      'settings' => array(
        'max' => '',
        'min' => '',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'number',
        'settings' => array(),
        'type' => 'number',
        'weight' => 1,
      ),
    );

    field_create_instance($instance);
  }
}

/**
 * Retrieves all float entries for a register and date.
 *
 * @param int $register_id
 *   The ID of the register to get the entry for.
 * @param int|bool $date
 *   (Optional) A timestamp indicating the date to retrieve the float entry for.
 *   Any entries that were created on the same day as $date will be returned.
 *   Defaults to current REQUEST_TIME.
 *
 * @return array
 *   All float entries found.
 */
function commerce_pos_register_get_floats($register_id, $date = FALSE) {
  $entries = array();

  if ($date === FALSE) {
    $date = REQUEST_TIME;
  }

  $start_of_day = strtotime('midnight', $date);
  $end_of_day = strtotime('tomorrow', $start_of_day) - 1;

  $query = db_select('commerce_pos_register_float', 'cprf');
  $query->fields('cprf', array(
    'float_id',
    'register_id',
    'amount',
    'created',
  ))
    ->condition('register_id', $register_id, '=')
    ->condition('created', $start_of_day, '>=')
    ->condition('created', $end_of_day, '<=');

  $result = $query->execute();

  foreach ($result as $row) {
    $entries[$row->float_id] = $row;
  }

  return $entries;
}

/**
 * Creates a new float entry for a register.
 *
 * @param int $register_id
 *   The ID of the register the float entry is for.
 * @param int $amount
 *   The float amount, in cents.
 */
function commerce_pos_register_add_float($register_id, $amount) {
  $record = (object) array(
    'float_id' => 0,
    'register_id' => $register_id,
    'amount' => $amount,
    'created' => REQUEST_TIME,
  );

  drupal_write_record('commerce_pos_register_float', $record);
}

/**
 * Retrieves the current user's location ID, if they have one.
 *
 * @return int|false
 *   The ID of a commerce_pos_location entity or FALSE.
 */
function commerce_pos_register_get_current_location() {
  $location = commerce_pos_register_get_location_for_register(commerce_pos_register_get_current_register());

  return !empty($location->location_id) ? $location->location_id : FALSE;
}
